#!/bin/bash
set -eo pipefail

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; exit 1; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }

# Check prerequisites
check_prerequisites() {
  info "Checking system prerequisites..."
  command -v terraform >/dev/null 2>&1 || error "Terraform is not installed."
  command -v docker >/dev/null 2>&1 || error "Docker is not installed."
  command -v jq >/dev/null 2>&1 || error "jq is not installed."
  command -v envsubst >/dev/null 2>&1 || error "envsubst is not installed (part of gettext package)."
  success "All prerequisites are met"
}

# Initialize Terraform
init_terraform() {
  info "Initializing Terraform..."
  if ! terraform init >/dev/null 2>&1; then
    terraform init | tee /dev/stderr | grep -q "Error" && error "Terraform init failed"
  fi
  success "Terraform initialized"
}

# Apply Terraform configuration
apply_terraform() {
  info "Applying Terraform configuration..."
  if ! terraform apply -auto-approve >/dev/null 2>&1; then
    terraform apply -auto-approve | tee /dev/stderr | grep -q "Error" && error "Terraform apply failed"
  fi
  success "Infrastructure provisioned"
}

# Generate environment file from outputs
generate_env_file() {
  info "Generating environment file..."
  
  OUTPUT_JSON=$(terraform output -json)
  
  cat > cognito.env <<EOF
# Auto-generated by deployment script
COGNITO_USER_POOL_ID=$(echo "$OUTPUT_JSON" | jq -r '.user_pool_id.value')
COGNITO_CLIENT_ID=$(echo "$OUTPUT_JSON" | jq -r '.cognito_client_id.value')
COGNITO_REGION=$(echo "$OUTPUT_JSON" | jq -r '.api_base_url.value' | cut -d'.' -f4)
COGNITO_DOMAIN=$(echo "$OUTPUT_JSON" | jq -r '.cognito_domain.value')
API_GATEWAY_URL=$(echo "$OUTPUT_JSON" | jq -r '.api_base_url.value')/upload
ORIGINAL_FILE_URL=$(echo "$OUTPUT_JSON" | jq -r '.api_base_url.value')/files
PRESIGNED_URL_ENDPOINT=$(echo "$OUTPUT_JSON" | jq -r '.api_base_url.value')/presigned-url
LIST_FILES_ENDPOINT=$(echo "$OUTPUT_JSON" | jq -r '.api_base_url.value')/files
USER_FILES_ENDPOINT=$(echo "$OUTPUT_JSON" | jq -r '.api_base_url.value')/get_user_uploads
OUTPUT_BUCKET_URL=https://$(echo "$OUTPUT_JSON" | jq -r '.output_bucket_dns.value')
API_KEY_URL=$(echo "$OUTPUT_JSON" | jq -r '.api_key_url.value' || echo '')
EOF

  success "Environment file created: cognito.env"
}

# Create config template file
create_config_template() {
  info "Creating config template file..."
  
  cat > cognito_config.template.js <<'EOF'
// Auto-generated config - Do not edit directly
const cognitoConfig = {
    UserPoolId: '${COGNITO_USER_POOL_ID}',
    ClientId: '${COGNITO_CLIENT_ID}',
    Region: '${COGNITO_REGION}',
    Domain: '${COGNITO_DOMAIN}',
    ApiGatewayUrl: '${API_GATEWAY_URL}',
    OriginalFileUrl: '${ORIGINAL_FILE_URL}',
    PresignedUrlEndpoint: '${PRESIGNED_URL_ENDPOINT}',
    ListFilesEndpoint: '${LIST_FILES_ENDPOINT}',
    UserFilesEndpoint: '${USER_FILES_ENDPOINT}',
    OutputBucketUrl: '${OUTPUT_BUCKET_URL}',
    apiKeyUrl: '${API_KEY_URL}'
};
EOF

  success "Config template created"
}

# Run Docker container
run_docker_container() {
  info "Launching Docker container..."
  
  # Create temporary directory for config files
  TEMP_DIR=$(mktemp -d)
  cp cognito_config.template.js "$TEMP_DIR/"
  cp cognito.env "$TEMP_DIR/"
  
  if ! docker run -d \
    --name translation-app \
    -p 8080:80 \
    -v "$TEMP_DIR:/usr/share/nginx/html/config" \
    --env-file cognito.env \
    realamponsah/azubi_translate:v1.0; then
    error "Failed to start Docker container"
  fi
  
  success "Container is running"
  echo -e "\nApplication should be available at:"
  echo -e "  http://localhost:8080"
}

# Cleanup old deployment
cleanup() {
  info "Checking for existing deployment..."
  if docker ps -a --filter "name=translation-app" | grep -q translation-app; then
    warn "Found existing container - removing..."
    docker rm -f translation-app || warn "Failed to remove old container"
  fi
}

# Main execution flow
main() {
  check_prerequisites
  cleanup
  init_terraform
  apply_terraform
  generate_env_file
  create_config_template
  run_docker_container
  
  success "\nDeployment complete!"
  echo -e "To view logs:"
  echo -e "  docker logs -f translation-app"
  echo -e "To stop the application:"
  echo -e "  docker stop translation-app"
}

main "$@"