<#
.SYNOPSIS
    Deployment script for translation app (Windows/PowerShell version)
.DESCRIPTION
    Automates infrastructure provisioning and application deployment using Terraform and Docker
.NOTES
    Requires: Terraform, Docker Desktop, and PowerShell 7+
#>

# Setup error handling
$ErrorActionPreference = "Stop"

# Color definitions
$Host.UI.RawUI.ForegroundColor = "White"
$ErrorColor = "Red"
$SuccessColor = "Green"
$WarningColor = "Yellow"
$InfoColor = "Cyan"

# Logging functions
function Write-ErrorLog {
    param($message)
    Write-Host "[ERROR] $message" -ForegroundColor $ErrorColor
    exit 1
}

function Write-WarningLog {
    param($message)
    Write-Host "[WARN] $message" -ForegroundColor $WarningColor
}

function Write-InfoLog {
    param($message)
    Write-Host "[INFO] $message" -ForegroundColor $InfoColor
}

function Write-SuccessLog {
    param($message)
    Write-Host "[SUCCESS] $message" -ForegroundColor $SuccessColor
}

# Check prerequisites
function Check-Prerequisites {
    Write-InfoLog "Checking system prerequisites..."
    
    # Check Terraform
    if (-not (Get-Command terraform -ErrorAction SilentlyContinue)) {
        Write-ErrorLog "Terraform is not installed. Download from https://www.terraform.io/downloads"
    }
    
    # Check Docker
    if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
        Write-ErrorLog "Docker is not installed. Install Docker Desktop from https://www.docker.com/products/docker-desktop"
    }
    
    # Check jq (optional as we'll use PowerShell's ConvertFrom-Json)
    try {
        $null = Get-Command jq -ErrorAction Stop
    } catch {
        Write-WarningLog "jq not found - using PowerShell native JSON parsing"
    }
    
    Write-SuccessLog "All prerequisites are met"
}

# Initialize Terraform
function Initialize-Terraform {
    Write-InfoLog "Initializing Terraform..."
    try {
        terraform init *>&1 | Tee-Object -Variable tfInitOutput
        if ($LASTEXITCODE -ne 0) {
            throw "Terraform init failed"
        }
        Write-SuccessLog "Terraform initialized"
    } catch {
        Write-ErrorLog $_
    }
}

# Apply Terraform configuration
function Apply-Terraform {
    Write-InfoLog "Applying Terraform configuration..."
    try {
        terraform apply -auto-approve *>&1 | Tee-Object -Variable tfApplyOutput
        if ($LASTEXITCODE -ne 0) {
            throw "Terraform apply failed"
        }
        Write-SuccessLog "Infrastructure provisioned"
    } catch {
        Write-ErrorLog $_
    }
}

# Generate environment file from outputs
function Generate-EnvFile {
    Write-InfoLog "Generating environment file..."
    
    try {
        $outputs = terraform output -json | ConvertFrom-Json -Depth 10
        
        $apiBaseUrl = $outputs.api_base_url.value
        $region = $apiBaseUrl.Split('.')[3]
        
        @"
# Auto-generated by deployment script
COGNITO_USER_POOL_ID=$($outputs.user_pool_id.value)
COGNITO_CLIENT_ID=$($outputs.cognito_client_id.value)
COGNITO_REGION=$region
COGNITO_DOMAIN=$($outputs.cognito_domain.value)
API_GATEWAY_URL=$apiBaseUrl/upload
ORIGINAL_FILE_URL=$apiBaseUrl/files
PRESIGNED_URL_ENDPOINT=$apiBaseUrl/presigned-url
LIST_FILES_ENDPOINT=$apiBaseUrl/files
USER_FILES_ENDPOINT=$apiBaseUrl/get_user_uploads
OUTPUT_BUCKET_URL=https://$($outputs.output_bucket_dns.value)
API_KEY_URL=$($outputs.api_key_url.value)
"@ | Out-File -FilePath cognito.env -Encoding utf8
        
        Write-SuccessLog "Environment file created: cognito.env"
    } catch {
        Write-ErrorLog "Failed to generate environment file: $_"
    }
}

# Create config template file
function Create-ConfigTemplate {
    Write-InfoLog "Creating config template file..."
    
    @'
// Auto-generated config - Do not edit directly
const cognitoConfig = {
    UserPoolId: '${COGNITO_USER_POOL_ID}',
    ClientId: '${COGNITO_CLIENT_ID}',
    Region: '${COGNITO_REGION}',
    Domain: '${COGNITO_DOMAIN}',
    ApiGatewayUrl: '${API_GATEWAY_URL}',
    OriginalFileUrl: '${ORIGINAL_FILE_URL}',
    PresignedUrlEndpoint: '${PRESIGNED_URL_ENDPOINT}',
    ListFilesEndpoint: '${LIST_FILES_ENDPOINT}',
    UserFilesEndpoint: '${USER_FILES_ENDPOINT}',
    OutputBucketUrl: '${OUTPUT_BUCKET_URL}',
    apiKeyUrl: '${API_KEY_URL}'
};
'@ | Out-File -FilePath cognito_config.template.js -Encoding utf8
    
    Write-SuccessLog "Config template created"
}

# Run Docker container
function Run-DockerContainer {
    Write-InfoLog "Launching Docker container..."
    
    try {
        # Create temporary directory for config files
        $tempDir = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
        Copy-Item cognito_config.template.js $tempDir
        Copy-Item cognito.env $tempDir
        
        # Run container
        docker run -d `
            --name translation-app `
            -p 8080:80 `
            -v "${tempDir}:/usr/share/nginx/html/config" `
            --env-file cognito.env `
            realamponsah/translate_app:latest
            
        if ($LASTEXITCODE -ne 0) {
            throw "Failed to start Docker container"
        }
        
        Write-SuccessLog "Container is running"
        Write-Host "`nApplication should be available at:`n  http://localhost:8080"
    } catch {
        Write-ErrorLog $_
    }
}

# Cleanup old deployment
function Cleanup-OldDeployment {
    Write-InfoLog "Checking for existing deployment..."
    
    try {
        $existingContainer = docker ps -a --filter "name=translation-app" --format "{{.Names}}"
        if ($existingContainer -eq "translation-app") {
            Write-WarningLog "Found existing container - removing..."
            docker rm -f translation-app
        }
    } catch {
        Write-WarningLog "Failed to remove old container: $_"
    }
}

# Main execution flow
function Main {
    Check-Prerequisites
    Cleanup-OldDeployment
    Initialize-Terraform
    Apply-Terraform
    Generate-EnvFile
    Create-ConfigTemplate
    Run-DockerContainer
    
    Write-SuccessLog "`nDeployment complete!"
    Write-Host "To view logs:`n  docker logs -f translation-app"
    Write-Host "To stop the application:`n  docker stop translation-app"
}

# Entry point
Main